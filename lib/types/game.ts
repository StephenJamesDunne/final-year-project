export type Element = 'fire' | 'water' | 'earth' | 'air' | 'spirit' | 'neutral';
export type CardType = 'minion' | 'spell';
export type Rarity = 'common' | 'rare' | 'epic' | 'legendary';

export type AbilityType = 
  | 'damage'
  | 'heal'
  | 'draw'
  | 'summon'
  | 'buff'
  | 'destroy'
  | 'return_to_hand'
  | 'gain_mana'
  | 'transform';

export type AbilityTrigger = 
  | 'battlecry'    // When played
  | 'deathrattle'  // When destroyed
  | 'end_of_turn'  
  | 'start_of_turn'
  | 'when_attack'
  | 'passive';     // Always active

export interface CardAbility {
  trigger: AbilityTrigger;
  type: AbilityType;
  value?: number;           // Numeric value (damage amount, cards drawn, etc.)
  target?: 'self' | 'enemy' | 'all' | 'random' | 'choose';
  condition?: string;       // Optional condition (e.g., "if_fionn_in_play")
  description: string;      // Text description of the ability
}

export interface Card {
  id: string;
  name: string;
  element: Element;
  type: CardType;
  rarity: Rarity;
  manaCost: number;
  attack?: number;
  health?: number;
  description: string;
  abilities?: CardAbility[];  // Needs to be optional for spell cards
  imageUrl?: string;
}

export interface Minion extends Card {
  type: 'minion';
  attack: number;
  health: number;
  currentHealth: number;
  canAttack: boolean;
  instanceId: string; // unique ID for copies of cards generated by the game
}

export interface Player {
  health: number;
  mana: number;
  maxMana: number;
  hand: Card[];
  board: Minion[];
  deck: Card[];
}

export interface BattleState {
  player: Player;
  ai: Player;
  currentTurn: 'player' | 'ai';
  turnNumber: number;
  gameOver: boolean;
  winner?: 'player' | 'ai';
  combatLog: string[];
  aiAction?: string; // Current AI action being shown
}